plugins {
    id 'application'
    id "org.openjfx.javafxplugin" version "0.0.14"
    id 'java'
    id 'jacoco'
}

version '0.0.2'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

application {
    mainClassName = 'fr.ensicaen.ecole.genielogiciel.LoginMain'
}

tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
}

repositories {
    mavenCentral()
}

sourceSets.main {
    java.srcDir file('src/main/java')
}

javafx {
    version = "16"
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation(
            implementation fileTree(dir: 'lib', include: ['*.jar'])
    )
    implementation 'junit:junit:4.13.1'
    implementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.5'
    implementation 'org.jetbrains:annotations:23.0.0'
    implementation 'org.jsoup:jsoup:1.14.3'

    testImplementation(
            ['org.hamcrest:hamcrest:2.2'],
            ['org.junit.jupiter:junit-jupiter:5.+'],
            ['org.mockito:mockito-core:4.+'],
            ['org.junit.jupiter:junit-jupiter:5.8.2'],
            [files("lib")]
    )
}

tasks.register('copyLibFolder', Copy) {
    description 'Copies the lib folder.'
    from('lib')
    into("$buildDir/classes")
}

compileJava.dependsOn copyLibFolder

applicationDistribution.from(['LICENSE', 'README.md']) {
    into ''
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.7"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jar {
    duplicatesStrategy = 'exclude'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}